/* ===================== */
/* Jacobian and Hessian  */
/* ===================== */
load(f90);

/** alpha: Yaw, beta: Pitch, gamma: Roll */
nx : cos(ya)*cos(pa);
ny : sin(ya)*cos(pa);
nz : -sin(pa);

ox : cos(ya)*sin(pa)*sin(ra) - sin(ya)*cos(ra);
oy : sin(ya)*sin(pa)*sin(ra) + cos(ya)*cos(ra);
oz : cos(pa)*sin(ra);

ax : cos(ya)*sin(pa)*cos(ra) + sin(ya)*sin(ra);
ay : sin(ya)*sin(pa)*cos(ra) - cos(ya)*sin(ra);
az : cos(pa)*cos(ra);

F : ( ( ( (nx*x + ny*y + nz*z - px*nx - py*ny - pz*nz)/a  )^(2))^(1.0/e2) + 
      ( ( (ox*x + oy*y + oz*z - px*ox - py*oy - pz*oz)/b  )^(2))^(1.0/e2) )^(e2 / e1) +
    ( ( (ax*x + ay*y + az*z - px*ax - py*ay - pz*az)/c  )^(2))^(1.0/e1);    
Er : ( F^e1 - 1 )^2;

Res : sqrt(a*b*c)*( (F^e1-1)^2 );

J : jacobian( [Res],[a,b,c, e1,e2, px,py,pz, ra,pa,ya] )$
H : hessian( Res, [a,b,c, e1,e2, px,py,pz, ra,pa,ya] )$

with_stdout("JH.f",
  print("      Subroutine jac (a,b,c, e1,e2, px,py,pz, ra,pa,ya, x,y,z, J)"),
  print("      real*8 a"),
  print("      real*8 b"),
  print("      real*8 c"),
  print("      real*8 e1"),
  print("      real*8 e2"),
  print("      real*8 px"),
  print("      real*8 py"),
  print("      real*8 pz"),
  print("      real*8 ra"),
  print("      real*8 pa"),
  print("      real*8 ya"),
  print("      real*8 x"),
  print("      real*8 y"),
  print("      real*8 z"),
  print("      Double Precision J(1,11)"),
  fortran( 'J = J ),
  print("      Return"),
  print("      End"),

  print("      Subroutine hessian (a,b,c, e1,e2, px,py,pz, ra,pa,ya, x,y,z, H)"),
  print("      real*8 a"),
  print("      real*8 b"),
  print("      real*8 c"),
  print("      real*8 e1"),
  print("      real*8 e2"),
  print("      real*8 px"),
  print("      real*8 py"),
  print("      real*8 pz"),
  print("      real*8 ra"),
  print("      real*8 pa"),
  print("      real*8 ya"),
  print("      real*8 x"),
  print("      real*8 y"),
  print("      real*8 z"),
  print("      Double Precision H(11,11)"),
  fortran( 'H = H ),
  print("      Return"),
  print("      End"),

  print("      Subroutine error (a,b,c, e1,e2, px,py,pz, ra,pa,ya, x,y,z, er)"),
  print("      real*8 a"),
  print("      real*8 b"),
  print("      real*8 c"),
  print("      real*8 e1"),
  print("      real*8 e2"),
  print("      real*8 px"),
  print("      real*8 py"),
  print("      real*8 pz"),
  print("      real*8 ra"),
  print("      real*8 pa"),
  print("      real*8 ya"),
  print("      real*8 x"),
  print("      real*8 y"),
  print("      real*8 z"),
  print("      real*8 er"),
  fortran( 'er = Er ),
  print("      Return"),
  print("      End")

);
